fill=data,
alpha=ifelse(sapply(data, is.na), 0, 1))) +
scale_fill_gradientn(colours=brewer.pal(9, 'RdBu')) +
scale_alpha_continuous(range=c(0,1),guide="none")
}
binmap(data, 'gps_height')
binmap <- function(data, to_bin){
temp <- as.data.frame(subset(data, longitude > 0, select=c('longitude',
'latitude',
to_bin)))
bin_df <- expand.grid(x=seq(min(temp$longitude),
max(temp$longitude),
length.out= 40),
y=seq(min(temp$latitude),
max(temp$latitude),
length.out= 40))
median_bin <- function(x, bin_size, data, to_bin){
dat_bin <- data[which(data$longitude > x[1] - bin_size[1]&
data$longitude < x[1] + bin_size[1] &
data$latitude > x[2] - bin_size[1]&
data$latitude < x[2] + bin_size[2]),
to_bin]
dat_bin <- dat_bin[which(dat_bin != 0)]
median(dat_bin)
}
bin_radius <- c((bin_df$x[2]-bin_df$x[1])/2, (bin_df$y[41]-bin_df$y[1])/2)
bin_df$data <- apply(bin_df, 1, median_bin, bin_radius, temp, to_bin)
ggmap(map) + geom_tile(data=bin_df,
aes(x=x,
y=y,
fill=data,
alpha=ifelse(sapply(data, is.na), 0, 1))) +
scale_fill_gradientn(colours=brewer.pal(9, 'RdBu')) +
scale_alpha_continuous(range=c(0,1),guide="none")
}
binmap(data, 'construction_year')
data_na <- merge(data_variables,
data_labels,
by = 'id')
data_na$longitude <- NULL
#vector of different chars representing NAs in the data
na_chars <- c('0', '-', 'other', 'Other', 'Others', '', 'Unknown', 'unknown')
#setting values to NA
for (i in colnames(data_na)){
class <- class(data_na[[i]])
if(class == 'numeric' | class == 'integer'){
data_na[which(abs(data_na[i]) < 0.000001),i] <- NA
}
if(class == 'factor'){
temp <- as.character(data_na[[i]])
for (c in na_chars){
temp[which(temp == c)] <- NA
}
data_na[i] <- factor(temp)
}
}
#function to count NAs in a row using apply
count_na <- function(x){
sum(is.na(x))
}
data_na$num_na <- apply(data_na,1,count_na)
c <- table(data.frame(variable = data_na['num_na'],
status_group = data_na['status_group']))
c_rel <- c/rowSums(c)
c_rel <- as.data.frame(c_rel)
c_rel$num_na <- as.numeric(as.factor(c_rel$num_na))
ggplot(c_rel, aes(num_na, Freq)) +
facet_grid(.~status_group) +
geom_point() +
stat_smooth(method=lm)
data$num_na <- data_na$num_na
binmap(data, 'num_na')
?scale_fill_gradientn
binmap <- function(data, to_bin, log=F){
temp <- as.data.frame(subset(data, longitude > 0, select=c('longitude',
'latitude',
to_bin)))
bin_df <- expand.grid(x=seq(min(temp$longitude),
max(temp$longitude),
length.out= 40),
y=seq(min(temp$latitude),
max(temp$latitude),
length.out= 40))
median_bin <- function(x, bin_size, data, to_bin){
dat_bin <- data[which(data$longitude > x[1] - bin_size[1]&
data$longitude < x[1] + bin_size[1] &
data$latitude > x[2] - bin_size[1]&
data$latitude < x[2] + bin_size[2]),
to_bin]
dat_bin <- dat_bin[which(dat_bin != 0)]
median(dat_bin)
}
bin_radius <- c((bin_df$x[2]-bin_df$x[1])/2, (bin_df$y[41]-bin_df$y[1])/2)
bin_df$data <- apply(bin_df, 1, median_bin, bin_radius, temp, to_bin)
p <- ggmap(map) + geom_tile(data=bin_df,
aes(x=x,
y=y,
fill=data,
alpha=ifelse(sapply(data, is.na), 0, 1))) +
scale_alpha_continuous(range=c(0,1),guide="none")
if(log){
p <- p + scale_fill_gradientn(colours=brewer.pal(9, 'RdBu'), trans='log')
} else{
p <- p + scale_fill_gradientn(colours=brewer.pal(9, 'RdBu'))
}
p
}
binmap(data, 'num_na', T)
bivariate(data$region, data$source_type)
bivariate(data$basin, data$source_type)
bivariate(data$basin, data$extraction_type_class)
bivariate(data$basin, data$quality_group)
bivariate(data$region, data$quality_group)
bivariate(data$region, data$payment_type)
bivariate(data$basin, data$payment_type)
bivariate(data$region, data$payment_type)
binmap(data, 'population')
binmap(data, 'population', T)
binmap(data, 'population')
bivariate(data$region, data$scheme_management)
bivariate(data$basin, data$scheme_management)
bivariate(data$region, data$public_meeting)
bivariate(data$region, data$management_type)
bivariate(data$region, data$management_group)
bivariate(data$basin, data$waterpoint_type)
binmap(data, 'amaount_tsh', T)
binmap(data, 'amount_tsh', T)
temp <- subset(data, extraction_type_class == 'motorpump')
bivariate(log10(temp$amount_tsh+1), temp$status_group,
seq(-0.25,6, by = 0.25),
seq(0,6, by =  0.25))
temp <- subset(data, extraction_type_class == 'gravity')
temp <- subset(data, extraction_type_class == 'gravity')
bivariate(log10(temp$amount_tsh+1), temp$status_group,
seq(-0.25,6, by = 0.25),
seq(0,6, by =  0.25))
temp <- subset(data, extraction_type_class == 'other')
bivariate(log10(temp$amount_tsh+1), temp$status_group,
seq(-0.25,6, by = 0.25),
seq(0,6, by =  0.25))
bivariate(data$source_type, data$extraction_type_class)
bivariate(data$source_type, data$waterpoint_type)
bivariate(data$waterpoint_type, data$extraction_type_class)
ggplot(data, aes(x=status_group))+geom_histogram()+facet_grid(extraction_type_class~waterpoint_type)
ggplot(data, aes(x=status_group))+geom_histogram(stat='count')+facet_grid(extraction_type_class~waterpoint_type)
ggplot(data, aes(x=status_group))+geom_bar()+facet_grid(extraction_type_class~waterpoint_type)
ggplot(data, aes(x=status_group))+geom_bar()+facet_grid(extraction_type_class~source_type)
ggplot(normalizedCounts(data$waterpoint_type, data$status_group), aes(x=label, y=value, fill=variable))+geom_bar(stat='identity')+facet_grid(extraction_type_class~source_type)
ggplot(data)+geom_bar(stat='identity', data=normalizedCounts(data$waterpoint_type, data$status_group), aes(x=label, y=value, fill=variable))+facet_grid(extraction_type_class~source_type)
m1 <- ggmap(map) +
geom_point(aes(x = longitude,
y = latitude,
color = region,
alpha = 0.2),
data = data) +
theme(legend.position="top")
m2 <- ggmap(map) +
geom_point(aes(x = longitude,
y = latitude,
color = basin,
alpha = 0.2),
data = data) +
theme(legend.position="top")
multiplot(m1, m2, cols=2)
temp <- subset(data, longitude > 0, select=c(longitude, latitude, status_group))
bin_func <- bin2(as.matrix(subset(temp,
status_group == 'functional',
select=c(longitude, latitude))),
nbin=c(40, 40))
bin_nonfunc <- bin2(as.matrix(subset(temp,
status_group == 'non functional' & status_group == 'functional needs repair',
select=c(longitude, latitude))),
nbin=c(40, 40))
bin_frac <- bin_func$nc/(bin_nonfunc$nc + bin_func$nc)
bin_df <- expand.grid(x=seq(min(temp$longitude),
max(temp$longitude),
length.out= 40),
y=seq(min(temp$latitude),
max(temp$latitude),
length.out= 40))
bin_df$data <- expand.grid(bin_frac)
ggmap(map) + geom_tile(data=bin_df,
aes(x=x,
y=y,
fill=data,
alpha=ifelse(sapply(data, is.nan), 0, 1))) +
scale_fill_gradientn(colours=brewer.pal(9, 'RdBu')) +
scale_alpha_continuous(range=c(0,1),guide="none")
temp <- subset(data, longitude > 0, select=c(longitude, latitude, status_group))
bin_func <- bin2(as.matrix(subset(temp,
status_group == 'functional',
select=c(longitude, latitude))),
nbin=c(40, 40))
bin_nonfunc <- bin2(as.matrix(subset(temp,
status_group != 'functional',
select=c(longitude, latitude))),
nbin=c(40, 40))
bin_frac <- bin_func$nc/(bin_nonfunc$nc + bin_func$nc)
bin_df <- expand.grid(x=seq(min(temp$longitude),
max(temp$longitude),
length.out= 40),
y=seq(min(temp$latitude),
max(temp$latitude),
length.out= 40))
bin_df$data <- expand.grid(bin_frac)
ggmap(map) + geom_tile(data=bin_df,
aes(x=x,
y=y,
fill=data,
alpha=ifelse(sapply(data, is.nan), 0, 1))) +
scale_fill_gradientn(colours=brewer.pal(9, 'RdBu')) +
scale_alpha_continuous(range=c(0,1),guide="none")
temp <- subset(data, longitude > 0, select=c(longitude, latitude, status_group))
bin_func <- bin2(as.matrix(subset(temp,
status_group != 'non functional',
select=c(longitude, latitude))),
nbin=c(40, 40))
bin_nonfunc <- bin2(as.matrix(subset(temp,
status_group == 'non functional',
select=c(longitude, latitude))),
nbin=c(40, 40))
bin_frac <- bin_func$nc/(bin_nonfunc$nc + bin_func$nc)
bin_df <- expand.grid(x=seq(min(temp$longitude),
max(temp$longitude),
length.out= 40),
y=seq(min(temp$latitude),
max(temp$latitude),
length.out= 40))
bin_df$data <- expand.grid(bin_frac)
ggmap(map) + geom_tile(data=bin_df,
aes(x=x,
y=y,
fill=data,
alpha=ifelse(sapply(data, is.nan), 0, 1))) +
scale_fill_gradientn(colours=brewer.pal(9, 'RdBu')) +
scale_alpha_continuous(range=c(0,1),guide="none")
binmap(data, 'population', T)
binmap(data, 'gps_height')
?round
count_na <- function(x){
sum(is.na(x))
}
data_na$num_na <- apply(data_na,1,count_na)
c <- table(data.frame(variable = data_na['num_na'],
status_group = data_na['status_group']))
c_rel <- c/rowSums(c)
c_rel <- as.data.frame(c_rel)
c_rel$num_na <- as.numeric(as.factor(c_rel$num_na))
ggplot(c_rel, aes(num_na, Freq)) +
facet_grid(.~status_group) +
geom_bar() +
stat_smooth(method=lm)
data$num_na <- data_na$num_na
p <- lineFrequency(data$construction_year,
data$status_group, 'Construction Year')
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year') +
stat_smooth(method=lm)
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
?stat_smooth
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))+
stat_smooth(method=lm)
lineFrequency <- function(x,
c,
xlab){
subData <- data.frame(independent = x, dependent = c)
subData[which(subData$independent == 0), 'independent'] = NA
subData <- as.data.frame(table(subData) / rowSums(table(subData)))
if (class(x) == 'numeric'){
subData$independent <- as.numeric(as.character(subData$independent))
} else if (class(x) == 'Date'){
subData$independent <- as.Date(as.character(subData$independent))
}
p <- ggplot(data = subData,
aes(x = independent,
y = Freq,
color = dependent)) +
geom_point() +
geom_smooth(method=lm) +
labs(x=xlab,
y='Frequency')
p
}
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
lineFrequency <- function(x,
c,
xlab){
subData <- data.frame(independent = x, dependent = c)
subData[which(subData$independent == 0), 'independent'] = NA
subData <- as.data.frame(table(subData) / rowSums(table(subData)))
if (class(x) == 'numeric'){
subData$independent <- as.numeric(as.character(subData$independent))
} else if (class(x) == 'Date'){
subData$independent <- as.Date(as.character(subData$independent))
}
print(class(subData$independent))
p <- ggplot(data = subData,
aes(x = independent,
y = Freq,
color = dependent)) +
geom_point() +
geom_smooth(method=lm) +
labs(x=xlab,
y='Frequency')
p
}
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
lineFrequency <- function(x,
c,
xlab){
subData <- data.frame(independent = x, dependent = c)
subData[which(subData$independent == 0), 'independent'] = NA
subData <- as.data.frame(table(subData) / rowSums(table(subData)))
if (class(x) == 'Date'){
subData$independent <- as.Date(as.character(subData$independent))
} else{
subData$independent <- as.numeric(as.character(subData$independent))
}
p <- ggplot(data = subData,
aes(x = independent,
y = Freq,
color = dependent)) +
geom_point() +
geom_smooth(method=lm) +
labs(x=xlab,
y='Frequency')
p
}
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))
?scale_x_continuous
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1969, 2020, 10), labels= seq(1969, 2020, 10))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age",
legend = "Water Point Status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
scale_fill_discrete(name = "New Legend Title") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
scale_color_discrete(name = "New Legend Title") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
?scale_color_discrete
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
scale_fill_brewer(palette="RdYlGn", name = "Water Point Status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"), name = "Water Point Status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
scale_color_manual(values=c("green", "yellow", "red"), name = "Water Point Status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
p <- lineFrequency(data$construction_year,
data$status_group,
'Construction Year')
p + labs(title = "Dependency of water point status on waterpoint age") +
scale_color_manual(values=c("green", "orange", "red"),
name = "Water Point Status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(1960, 2020, 10), labels= seq(1960, 2020, 10))
m <- binmap(data, 'construction_year')
m + labs(x = 'Longitude', y = 'Latitude')
m <- binmap(data, 'construction_year')
m + labs(x = 'Longitude',
y = 'Latitude',
title = 'Median water point age over Tanzania') +
scale_fill_manual(name = "Median Construction Year")
m <- binmap(data, 'construction_year')
m + labs(x = 'Longitude',
y = 'Latitude',
title = 'Median water point age over Tanzania') +
scale_fill_continuous(name = "Median Construction Year")
m <- binmap(data, 'construction_year')
m + labs(x = 'Longitude',
y = 'Latitude',
title = 'Median water point age over Tanzania') +
scale_fill_brewer(palette = 'Greens', name = "Median Construction Year")
m <- binmap(data, 'construction_year')
m + labs(x = 'Longitude',
y = 'Latitude',
title = 'Median water point age over Tanzania') +
scale_fill_brewer(palette = 'RdYlGn', name = "Median Construction Year")
m <- binmap(data, 'construction_year')
m + labs(x = 'Longitude',
y = 'Latitude',
title = 'Median water point age over Tanzania') +
scale_fill_gradientn(colours=brewer.pal(9, 'RdYlGn'), name = "Median Construction Year")
ggplot(c_rel, aes(num_na, Freq)) +
facet_grid(.~status_group) +
geom_point() +
stat_smooth(method=lm)+
labs(title = "Dependency of water point status on water point age") +
scale_color_manual(values=c("green", "orange", "red"),
name = "Water Point Status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(0, 30, 10), labels= seq(0, 30, 10))
ggplot(c_rel, aes(num_na, Freq)) +
facet_grid(.~status_group) +
geom_point() +
stat_smooth(method=lm)+
labs(title = "Dependency of water point status on water point age") +
scale_color_manual(values=c("green", "orange", "red"),
name = "Water Point Status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(0, 30, 5), labels= seq(0, 30, 5))
ggplot(c_rel, aes(num_na, Freq, color=status_group)) +
facet_grid(.~status_group) +
geom_point() +
stat_smooth(method=lm)+
labs(title = "Dependency of water point status on water point age") +
scale_color_manual(values=c("green", "orange", "red"),
name = "Water Point Status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(0, 30, 5), labels= seq(0, 30, 5))
ggplot(c_rel, aes(num_na, Freq, color=status_group)) +
facet_grid(.~status_group) +
geom_point() +
stat_smooth(method=lm) +
labs(x='Median number of NAs per entry',
y='Frequency',
title = "Data integrity correlates with water point status") +
scale_color_manual(values=c("green", "orange", "red"),
name = "Water Point Status") +
theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.3))  +
scale_x_continuous(breaks= seq(0, 30, 5), labels= seq(0, 30, 5))
