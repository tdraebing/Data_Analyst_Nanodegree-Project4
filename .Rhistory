library(data.table)
library(ggmap)
library(randomForest)
library(gridExtra)
library(GGally)
library(sm)
library(RColorBrewer)
library(ash)
library(lattice)
# Chunk 3
#general function definitions
#http://www.cookbook-r.com/Graphs/Multiple_graphs_on_one_page_(ggplot2)/
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
#fetch a sorted and truncated summary
getSummary <- function(x, decreasing = T, head = T){
if (head){
head(sort(summary(x), decreasing = decreasing),10)
}else{
tail(sort(summary(x), decreasing = decreasing),10)
}
}
#generate histograms for the univariate analysis
univariate <- function(data,
varname,
log = F){
if(log){
d <- log10(data[[varname]] + 1)
}else{
d <- data[[varname]]
}
p <- ggplot(data, aes(x = d)) +
labs(x = varname)
if (class(data[[varname]]) == 'numeric'){
p <- p + geom_histogram()
p <- p + scale_x_continuous()
} else {
p <- p + geom_bar()
if (length(levels(data[[varname]])) >= 30){
br <- round(seq(from=1, to=length(levels(data[[varname]])), length.out=15))
lev <- levels(data[[varname]])[br]
p <- p + scale_x_discrete(breaks= lev, labels= lev)
}
}
if (class(data[[varname]]) == 'Date'){
p <- p + scale_x_date()
}
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
}
#generate a line frequency plot
lineFrequency <- function(x,
c,
xlab){
#calculate fractions for each value level
subData <- data.frame(independent = x, dependent = c)
subData[which(subData$independent == 0), 'independent'] = NA
subData <- as.data.frame(table(subData) / rowSums(table(subData)))
if (class(x) == 'Date'){
subData$independent <- as.Date(as.character(subData$independent))
} else{
subData$independent <- as.numeric(as.character(subData$independent))
}
p <- ggplot(data = subData,
aes(x = independent,
y = Freq,
color = dependent)) +
geom_point() +
geom_smooth(method=lm) +
labs(x=xlab,
y='Frequency')
p
}
#normalize the counts per value level
normalizedCounts <- function(x, y, breaks = NULL, labels = NULL){
if (class(x) == 'numeric' || class(x) == 'integer'){
x <- cut(x,
breaks = breaks,
labels=labels)
}
df <- data.frame(x = x, y=y)
tab <- as.data.frame(table(df))
tab_wide <- reshape(tab,
v.names="Freq",
timevar="y",
idvar="x",
direction='wide')
rownames(tab_wide) <- tab_wide$x
tab_wide$x <- NULL
tab_norm <- as.data.frame(t(apply(tab_wide, 1, function(x) x/sum(x))))
if (class(x) == 'numeric' || class(x) == 'integer'){
tab_norm$label <- as.numeric(rownames(tab_norm))
}else{
tab_norm$label <- rownames(tab_norm)
}
melt(tab_norm)
}
# generate stacked bar plots plotting categorical variable in an absolute and relative way
bivariate <- function(x, y, breaks = NULL, labels = NULL, facet = factor()){
df <- data.frame(x=x, y=y)
rel_count_functional <- nrow(subset(df, y=='functional'))/nrow(df)
p1 <- ggplot(df,
aes(x=x, fill=y))
p2 <- ggplot(normalizedCounts(df$x,
df$y,
breaks,
labels),
aes(x=label, y=value, fill=variable))
if(class(x) == 'numeric' || class(x) == 'integer'){
p1 <- p1 + geom_histogram()
p2 <- p2 + geom_bar(stat='identity', aes(x=as.numeric(label))) +
scale_x_continuous()
}else if(class(x) == 'factor'){
p1 <- p1 + geom_bar()
p2 <- p2 + geom_bar(stat='identity')
}
p1 <- p1 + theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.3),
legend.position="none")
p2 <- p2 + geom_hline(yintercept=rel_count_functional) +
theme(axis.text.x = element_text(angle = 90,
hjust = 1,
vjust = 0.3),
legend.position="top")
multiplot(p1, p2, cols=2)
}
#function to bin variables to geographical bins and plot them to a map
binmap <- function(data, to_bin, log=F){
temp <- as.data.frame(subset(data, longitude > 0, select=c('longitude',
'latitude',
to_bin)))
bin_df <- expand.grid(x=seq(min(temp$longitude),
max(temp$longitude),
length.out= 40),
y=seq(min(temp$latitude),
max(temp$latitude),
length.out= 40))
median_bin <- function(x, bin_size, data, to_bin){
dat_bin <- data[which(data$longitude > x[1] - bin_size[1]&
data$longitude < x[1] + bin_size[1] &
data$latitude > x[2] - bin_size[1]&
data$latitude < x[2] + bin_size[2]),
to_bin]
dat_bin <- dat_bin[which(dat_bin != 0)]
median(dat_bin)
}
bin_radius <- c((bin_df$x[2]-bin_df$x[1])/2, (bin_df$y[41]-bin_df$y[1])/2)
bin_df$data <- apply(bin_df, 1, median_bin, bin_radius, temp, to_bin)
p <- ggmap(map) + geom_tile(data=bin_df,
aes(x=x,
y=y,
fill=data,
alpha=ifelse(sapply(data, is.na), 0, 1))) +
scale_alpha_continuous(range=c(0,1),guide="none")
if(log){
p <- p + scale_fill_gradientn(colours=brewer.pal(9, 'RdBu'), trans='log')
} else{
p <- p + scale_fill_gradientn(colours=brewer.pal(9, 'RdBu'))
}
p
}
# Chunk 4: Load_the_Data
# Load the Data
data_variables <- read.csv('data/training_set.csv')
data_labels <- read.csv('data/training_labels.csv')
#merging variables and labels
data <- merge(data_variables,
data_labels,
by = 'id')
ls(data)
# Chunk 5
univariate(data, 'id')
getSummary(data$id, F)
# Chunk 6
getSummary(data$date_recorded, T)
getSummary(data$date_recorded, T, F)
data$date_recorded <- as.Date(data$date_recorded, '%Y-%m-%d')
univariate(subset(data,
date_recorded > as.Date('2011-01-01', '%Y-%m-%d')),
'date_recorded')
# Chunk 7
getSummary(data$num_private, F)
univariate(data, 'num_private')
univariate(subset(data, num_private != 0), 'num_private')
?scale_x_continuous
p <- univariate(subset(data, num_private != 0), 'num_private')
p<- p + scale_x_continuous(trans='log')
p
p <- p + scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000))
p
p <- p + scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
?geom_histogram
univariate <- function(data,
varname,
log = F,
bins = 30){
if(log){
d <- log10(data[[varname]] + 1)
}else{
d <- data[[varname]]
}
p <- ggplot(data, aes(x = d)) +
labs(x = varname)
if (class(data[[varname]]) == 'numeric'){
p <- p + geom_histogram(bins = bins)
p <- p + scale_x_continuous()
} else {
p <- p + geom_bar()
if (length(levels(data[[varname]])) >= 30){
br <- round(seq(from=1, to=length(levels(data[[varname]])), length.out=15))
lev <- levels(data[[varname]])[br]
p <- p + scale_x_discrete(breaks= lev, labels= lev)
}
}
if (class(data[[varname]]) == 'Date'){
p <- p + scale_x_date()
}
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
}
p <- univariate(subset(data, num_private != 0), 'num_private', bins=10)
p <- p + scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
p <- univariate(subset(data, num_private != 0), 'num_private', bins=5)
p <- p + scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
p <- univariate(subset(data, num_private != 0), 'num_private', bins=5)
p
p <- univariate(subset(data, num_private != 0), 'num_private', bins=200)
p
p <- univariate(subset(data, num_private != 0), 'num_private', bins=200)
p <- p + scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(trans='log')
p
p <- univariate(subset(data, num_private != 0), 'num_private', bins=200)
p <- p + scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
univariate <- function(data,
varname,
log = F,
bins = 30){
if(log){
d <- log10(data[[varname]] + 1)
}else{
d <- data[[varname]]
}
p <- ggplot(data, aes(x = d)) +
labs(x = varname)
if (class(data[[varname]]) == 'numeric'){
p <- p + geom_histogram(bins = bin_width=bins)
p <- p + scale_x_continuous()
} else {
p <- p + geom_bar()
if (length(levels(data[[varname]])) >= 30){
br <- round(seq(from=1, to=length(levels(data[[varname]])), length.out=15))
lev <- levels(data[[varname]])[br]
p <- p + scale_x_discrete(breaks= lev, labels= lev)
}
}
if (class(data[[varname]]) == 'Date'){
p <- p + scale_x_date()
}
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
}
univariate <- function(data,
varname,
log = F,
bins = 30){
if(log){
d <- log10(data[[varname]] + 1)
}else{
d <- data[[varname]]
}
p <- ggplot(data, aes(x = d)) +
labs(x = varname)
if (class(data[[varname]]) == 'numeric'){
p <- p + geom_histogram(bin_width=bins)
p <- p + scale_x_continuous()
} else {
p <- p + geom_bar()
if (length(levels(data[[varname]])) >= 30){
br <- round(seq(from=1, to=length(levels(data[[varname]])), length.out=15))
lev <- levels(data[[varname]])[br]
p <- p + scale_x_discrete(breaks= lev, labels= lev)
}
}
if (class(data[[varname]]) == 'Date'){
p <- p + scale_x_date()
}
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
}
p <- univariate(subset(data, num_private != 0), 'num_private', bins=100)
p <- p + scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
p <- ggplot(data = subset(data, num_private != 0), aes(x=num_private)) +
geom_histogram(bin_width=200)
scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
p <- ggplot(data = subset(data, num_private != 0), aes(x=num_private)) +
geom_histogram(binwidth=200)
scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
p <- ggplot(data = subset(data, num_private != 0), aes(x=num_private)) +
geom_histogram(binwidth=200) +
scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
univariate <- function(data,
varname,
log = F,
bins = 30){
if(log){
d <- log10(data[[varname]] + 1)
}else{
d <- data[[varname]]
}
p <- ggplot(data, aes(x = d)) +
labs(x = varname)
if (class(data[[varname]]) == 'numeric'){
p <- p + geom_histogram(binwidth=bins)
p <- p + scale_x_continuous()
} else {
p <- p + geom_bar()
if (length(levels(data[[varname]])) >= 30){
br <- round(seq(from=1, to=length(levels(data[[varname]])), length.out=15))
lev <- levels(data[[varname]])[br]
p <- p + scale_x_discrete(breaks= lev, labels= lev)
}
}
if (class(data[[varname]]) == 'Date'){
p <- p + scale_x_date()
}
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
}
p <- univariate(subset(data, num_private != 0), 'num_private', bins=100)
p <- p + scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
univariate(subset(data, num_private != 0), 'num_private', bins=100)
univariate(subset(data, num_private != 0), 'num_private', bins=200)
univariate <- function(data,
varname,
log = F,
bins = 30){
if(log){
d <- log10(data[[varname]] + 1)
}else{
d <- data[[varname]]
}
p <- ggplot(data, aes(x = d)) +
labs(x = varname)
if (class(data[[varname]]) == 'numeric' || class(data[[varname]]) == 'integer'){
p <- p + geom_histogram(binwidth=bins)
p <- p + scale_x_continuous()
} else {
p <- p + geom_bar()
if (length(levels(data[[varname]])) >= 30){
br <- round(seq(from=1, to=length(levels(data[[varname]])), length.out=15))
lev <- levels(data[[varname]])[br]
p <- p + scale_x_discrete(breaks= lev, labels= lev)
}
}
if (class(data[[varname]]) == 'Date'){
p <- p + scale_x_date()
}
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
}
univariate(subset(data, num_private != 0), 'num_private', bins=200)
p <- univariate(subset(data, num_private != 0), 'num_private', bins=200)
p <- p + scale_x_continuous(trans='log', breaks = c(2.5, 25, 250, 1000)) +
scale_y_continuous(limits = c(0,50))
p
p <- univariate(subset(data, num_private != 0), 'num_private', bins=200)
p <- p + scale_x_continuous(trans='log') +
scale_y_continuous(limits = c(0,50))
p
p <- univariate(subset(data, num_private != 0), 'num_private', bins=200)
p <- p + scale_x_continuous(trans='log')
p
subset(data, num_private != 0, select=num_private)
p <- univariate(subset(data, num_private != 0), 'num_private', bins=10)
p <- p + scale_x_continuous(trans='log')
p
univariate <- function(data,
varname,
log = F,
bins = 30){
if(log){
d <- log10(data[[varname]] + 1)
}else{
d <- data[[varname]]
}
p <- ggplot(data, aes(x = d)) +
labs(x = varname)
if (class(data[[varname]]) == 'numeric' || class(data[[varname]]) == 'integer'){
p <- p + geom_histogram(bins=bins)
p <- p + scale_x_continuous()
} else {
p <- p + geom_bar()
if (length(levels(data[[varname]])) >= 30){
br <- round(seq(from=1, to=length(levels(data[[varname]])), length.out=15))
lev <- levels(data[[varname]])[br]
p <- p + scale_x_discrete(breaks= lev, labels= lev)
}
}
if (class(data[[varname]]) == 'Date'){
p <- p + scale_x_date()
}
p <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))
p
}
p <- univariate(subset(data, num_private != 0), 'num_private', bins=10)
p <- p + scale_x_continuous(trans='log')
p
p <- p + scale_x_continuous(trans='log', breaks=c(7,140,2800))
p
getSummary(subset(data, num_private != 0, select = num_private), F)
p <- univariate(data, 'wpt_name')
p <- p + scale_y_continuous(limits=c(0,10))
p
p <- p + scale_y_continuous(limits=c(0,7.5))
p
getSummary(subset(data, data$gps_height != 0, select=gps_height), T)
p <- univariate(subset(data, data$gps_height != 0), 'gps_height')
p
p <- univariate(data, 'subvillage')
p <- p + scale_y_continuous(limits = c(0,100))
p
p <- univariate(data[order(data$subvillage),], 'subvillage')
p
univariate(head(data$subvillage, 20), 'subvillage')
head(data$subvillage, 20)
getSummary(subset(data, amount_tsh != 0, select = amount_tsh), F)
p <- univariate(subset(data, amount_tsh != 0), 'amount_tsh', bins=10)
p <- p + scale_x_continuous(trans='log')
p
p <- p + scale_x_continuous(trans='log', breaks=c(1, 50, 2500, 150000))
p
p <- univariate(subset(data, amount_tsh != 0), 'amount_tsh', bins=10)
p <- p + scale_x_continuous(trans='log10')
p
getSummary(subset(data, amount_tsh != 0, select = amount_tsh), F)
p <- univariate(subset(data, amount_tsh != 0), 'amount_tsh')
p <- p + scale_x_continuous(trans='log10')
p
getSummary(subset(data, data$gps_height != 0, select=gps_height), T)
univariate(subset(data, data$gps_height != 0), 'gps_height')
getSummary(subset(data, amount_tsh != 0, select = amount_tsh), F)
p <- univariate(subset(data, amount_tsh != 0), 'amount_tsh')
p <- p + scale_x_continuous(trans='log10')
p
p <- univariate(data, 'funder')
p + scale_y_continuous(trans='log10')
univariate(data, 'population', log=T)
getSummary(subset(data, population != 0, select = population), F)
p <- univariate(subset(data, population != 0), 'population')
p <- p + scale_x_continuous(trans='log10')
p
univariate(data, 'population')
p <- univariate(subset(data, population != 0), 'population')
p <- p + scale_x_continuous(trans='log10')
p
?cor.test
